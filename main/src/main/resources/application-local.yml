server:
  port: 4000

spring:
  config:
    activate:
      on-profile: local
    import: application-secret.properties
  datasource:
    driver-class-name: org.postgresql.Driver
    jdbc-url: jdbc:postgresql://${LOCAL_DB_HOST}:${LOCAL_DB_PORT}/${LOCAL_DB_NAME}?currentSchema=${LOCAL_DB_SCHEMA}
    username: ${LOCAL_DB_USERNAME}
    password: ${LOCAL_DB_PASSWORD}
  playground-datasource:
    jdbc-url: jdbc:postgresql://${LOCAL_DB_HOST}:${LOCAL_DB_PORT}/${LOCAL_PLAYGROUND_DB_NAME}?currentSchema=${LOCAL_PLAYGROUND_DB_SCHEMA}
    username: ${LOCAL_PLAYGROUND_DB_USERNAME}
    password: ${LOCAL_PLAYGROUND_DB_PASSWORD}
  jpa:
    open-in-view: false
    hibernate:
      naming:
        physical-strategy: org.sopt.makers.crew.main.global.config.CamelCaseNamingStrategy
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
      dialect: org.hibernate.dialect.PostgreSQLDialect
      storage_engine: innodb
  data:
    redis:
      host: localhost
      port: 6379

jwt:
  header: Authorization
  secret: ${LOCAL_JWT_SECRET}
  access-token:
    expire-length: ${ACCESS_TOKEN_EXPIRED_TIME}

aws-property:
  aws-region: ${AWS_REGION}
  s3-bucket-name: ${AWS_S3_BUCKET_NAME}
  access-key: ${AWS_ACCESS_KEY_ID}
  secret-key: ${AWS_SECRET_ACCESS_KEY}
  file-min-size: ${AWS_FILE_MIN_SIZE}
  file-max-size: ${AWS_FILE_MAX_SIZE}
  algorithm: ${AWS_ALGORITHM}
  content-type: ${AWS_CONTENT_TYPE}
  request-type: ${AWS_REQUEST_TYPE}
  object-url: ${AWS_OBJECT_URL}

springdoc:
  packages-to-scan: org.sopt.makers.crew
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /api-docs/json
    groups:
      enabled: true

push-notification:
  web-url: ${LOCAL_WEB_PAGE_URL}
  x-api-key: ${LOCAL_PUSH_API_KEY}
  service: ${PUSH_NOTIFICATION_SERVICE}
  push-server-url: ${LOCAL_PUSH_SERVER_URL}

notice:
  secret-key: ${NOTICE_SECRET_KEY}

playground:
  server:
    url: ${LOCAL_PLAYGROUND_URL}
    endpoint: ${PLAYGROUND_ENDPOINT}

management:
  server:
    port: ${ACTUATOR_PORT}
  endpoints:
    enabled-by-default: false
    jmx:
      exposure:
        exclude: "*"
    web:
      exposure:
        include: info, health, prometheus
      base-path: ${ACTUATOR_PATH}
  endpoint:
    health:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

custom:
  paths:
    eventApply: ${DEV_EVENT_APPLY_PATH}

sentry:
  dsn: ${SENTRY_DSN}
  environment: ${DEV_SENTRY_ENVIRONMENT}
  servername: ${DEV_SENTRY_SERVERNAME}

logging:
  slack:
    webhook-uri: ${LOCAL_SENTRY_SLACK_WEBHOOK_URI}
  config: classpath:logback-spring.xml
  sentry:
    repository-uri: ${LOCAL_SENTRY_REPOSITORY_URI}
    environment: local

img:
  flash: ${FLASH_IMAGE}

thread-pool:
  core-size: ${DEV_THREAD_CORE_SIZE}
  thread-name-prefix: ${DEV_THREAD_NAME_PREFIX}
