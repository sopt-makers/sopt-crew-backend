server:
  port: 4000

spring:
  config:
    activate:
      on-profile: dev
    import: application-secret.properties
  datasource:
    driver-class-name: org.postgresql.Driver
    jdbc-url: jdbc:postgresql://${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_DB_NAME}?currentSchema=${DEV_DB_SCHEMA}
    username: ${DEV_DB_USERNAME}
    password: ${DEV_DB_PASSWORD}
  playground-datasource:
    jdbc-url: jdbc:postgresql://${DEV_DB_HOST}:${DEV_DB_PORT}/${DEV_PLAYGROUND_DB_NAME}?currentSchema=${DEV_PLAYGROUND_DB_SCHEMA}
    username: ${DEV_PLAYGROUND_DB_USERNAME}
    password: ${DEV_PLAYGROUND_DB_PASSWORD}
  jpa:
    open-in-view: false
    hibernate:
      naming:
        physical-strategy: org.sopt.makers.crew.main.global.config.CamelCaseNamingStrategy
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: true
      dialect: org.hibernate.dialect.PostgreSQLDialect
      storage_engine: innodb
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=500,expireAfterWrite=24h

jwt:
  header: Authorization
  secret: ${DEV_JWT_SECRET}
  access-token:
    expire-length: ${DEV_ACCESS_TOKEN_EXPIRED_TIME} # 10ë¶„

aws-property:
  aws-region: ${AWS_REGION}
  s3-bucket-name: ${AWS_S3_BUCKET_NAME}
  access-key: ${AWS_ACCESS_KEY_ID}
  secret-key: ${AWS_SECRET_ACCESS_KEY}
  file-min-size: ${AWS_FILE_MIN_SIZE}
  file-max-size: ${AWS_FILE_MAX_SIZE}
  algorithm: ${AWS_ALGORITHM}
  content-type: ${AWS_CONTENT_TYPE}
  request-type: ${AWS_REQUEST_TYPE}
  object-url: ${AWS_OBJECT_URL}

springdoc:
  packages-to-scan: org.sopt.makers.crew
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /api-docs/json
    groups:
      enabled: true

push-notification:
  web-url: ${DEV_WEB_PAGE_URL}
  x-api-key: ${DEV_PUSH_API_KEY}
  service: ${PUSH_NOTIFICATION_SERVICE}
  push-server-url: ${DEV_PUSH_SERVER_URL}

notice:
  secret-key: ${NOTICE_SECRET_KEY}

external:
  auth:
    url: https://auth.api.dev.sopt.org
    api-key: ${AUTH_API_KEY}
    service-name: ${OUR_SERVICE_NAME}
    endpoints:
      jwk: ${MAKERS_AUTH_JWK_ENDPOINT}

management:
  server:
    port: ${ACTUATOR_PORT}
  health:
    redis:
      enabled: false
  endpoints:
    enabled-by-default: false
    jmx:
      exposure:
        exclude: "*"
    web:
      exposure:
        include: health, info, metrics, prometheus, caches, cachecontents
      base-path: ${ACTUATOR_PATH}
  endpoint:
    health:
      enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
    caches:
      enabled: true
    cachecontents:
      enabled: true

custom:
  paths:
    eventApply: ${DEV_EVENT_APPLY_PATH}
    adminKey: ${ADMIN_SECRET}

sentry:
  dsn: ${SENTRY_DSN}
  environment: ${DEV_SENTRY_ENVIRONMENT}
  servername: ${DEV_SENTRY_SERVERNAME}


img:
  flash: ${FLASH_IMAGE}

thread-pool:
  core-size: ${DEV_THREAD_CORE_SIZE}
  thread-name-prefix: ${DEV_THREAD_NAME_PREFIX}
